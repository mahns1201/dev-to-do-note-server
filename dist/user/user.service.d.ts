import { Repository, UpdateResult } from 'typeorm';
import { UserEntity } from './entity/user.entity';
import { InputCreateUserDto } from './dto/create-user.dto';
import { ServiceResultDto } from 'src/common/common.dto';
import { InputFindUserDto } from './dto/find-user.dto';
import { InputGithubAccessTokenUpdateDto } from './dto/update-user.dto';
export declare class UserService {
    private userRepository;
    constructor(userRepository: Repository<UserEntity>);
    create(input: InputCreateUserDto): Promise<ServiceResultDto<UserEntity>>;
    findOne(input: InputFindUserDto): Promise<ServiceResultDto<UserEntity>>;
    getGithubAccessToken(input: InputFindUserDto): Promise<ServiceResultDto<string>>;
    findUser(input: any): Promise<ServiceResultDto<UserEntity>>;
    updateGithubAccessToken(input: InputGithubAccessTokenUpdateDto): Promise<ServiceResultDto<UpdateResult>>;
    getGithubProfile(githubAccessToken: any): Promise<{
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        name: string;
        company: string;
        blog: string;
        location: string;
        email: string;
        hireable: boolean;
        bio: string;
        twitter_username?: string;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        created_at: string;
        updated_at: string;
        private_gists: number;
        total_private_repos: number;
        owned_private_repos: number;
        disk_usage: number;
        collaborators: number;
        two_factor_authentication: boolean;
        plan?: {
            collaborators: number;
            name: string;
            space: number;
            private_repos: number;
        };
        suspended_at?: string;
        business_plus?: boolean;
        ldap_dn?: string;
    } | {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
        name: string;
        company: string;
        blog: string;
        location: string;
        email: string;
        hireable: boolean;
        bio: string;
        twitter_username?: string;
        public_repos: number;
        public_gists: number;
        followers: number;
        following: number;
        created_at: string;
        updated_at: string;
        plan?: {
            collaborators: number;
            name: string;
            space: number;
            private_repos: number;
        };
        suspended_at?: string;
        private_gists?: number;
        total_private_repos?: number;
        owned_private_repos?: number;
        disk_usage?: number;
        collaborators?: number;
    }>;
    getGithubEmail(githubAccessToken: any): Promise<string>;
}
